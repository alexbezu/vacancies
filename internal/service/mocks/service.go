// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/service.go -package=mocks Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/alexbezu/vacancies/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetSites mocks base method.
func (m *MockStorage) GetSites(ctx context.Context) ([]model.JobSite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSites", ctx)
	ret0, _ := ret[0].([]model.JobSite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSites indicates an expected call of GetSites.
func (mr *MockStorageMockRecorder) GetSites(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSites", reflect.TypeOf((*MockStorage)(nil).GetSites), ctx)
}

// GetURLs mocks base method.
func (m *MockStorage) GetURLs(ctx context.Context) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLs", ctx)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLs indicates an expected call of GetURLs.
func (mr *MockStorageMockRecorder) GetURLs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLs", reflect.TypeOf((*MockStorage)(nil).GetURLs), ctx)
}

// StoreURLs mocks base method.
func (m *MockStorage) StoreURLs(ctx context.Context, urls map[string]bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreURLs", ctx, urls)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreURLs indicates an expected call of StoreURLs.
func (mr *MockStorageMockRecorder) StoreURLs(ctx, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreURLs", reflect.TypeOf((*MockStorage)(nil).StoreURLs), ctx, urls)
}

// MockWebhook is a mock of Webhook interface.
type MockWebhook struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookMockRecorder
	isgomock struct{}
}

// MockWebhookMockRecorder is the mock recorder for MockWebhook.
type MockWebhookMockRecorder struct {
	mock *MockWebhook
}

// NewMockWebhook creates a new mock instance.
func NewMockWebhook(ctrl *gomock.Controller) *MockWebhook {
	mock := &MockWebhook{ctrl: ctrl}
	mock.recorder = &MockWebhookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhook) EXPECT() *MockWebhookMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockWebhook) Send(ctx context.Context, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockWebhookMockRecorder) Send(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockWebhook)(nil).Send), ctx, message)
}
